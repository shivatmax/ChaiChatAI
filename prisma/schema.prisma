generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(uuid())
  encrypted_name       String
  encrypted_email      String
  email_hash           String                @unique
  encryption_salt      String
  encryption_key       String
  iv                   String
  tag                  String
  name                 String                @default("New_User")
  about                String
  persona              String
  knowledge_base       String
  avatar_url           String?
  created_at           DateTime              @default(now())
  updated_at           DateTime              @updatedAt
  favorite_avatars     String[]              @default([])
  AIFriend             AIFriend[]
  conversation_history ConversationHistory[]
  sessions             Session[]
  user_knowledge_base  UserKnowledgeBase[]
  todaysSummary        Boolean               @default(true)
  created_avatars      Avatar[]

  // Relations
  settings        UserSettings?
  usageStats      UsageStatistics?
  accountSettings AccountSettings?
}

model Avatar {
  id           String   @id @default(uuid())
  name         String
  creator_id   String
  description  String
  image_url    String
  interactions Int      @default(0)
  tags         String[] @default([])
  is_featured  Boolean  @default(false)
  is_public    Boolean  @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // AI Friend properties
  about          String  @default("")
  persona        String  @default("")
  knowledge_base String  @default("")
  memory         Json?
  status         Boolean @default(true)

  // Relations
  creator            User       @relation(fields: [creator_id], references: [id])
  used_by_ai_friends AIFriend[]

  @@index([creator_id])
}

model AIFriend {
  id             String   @id @default(uuid())
  user_id        String
  avatar_id      String
  name           String
  about          String
  persona        String
  knowledge_base String
  memory         Json?
  status         Boolean  @default(true)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  is_original    Boolean  @default(false)
  original_id    String?
  max_uses       Int      @default(5)
  in_use         Boolean  @default(false)

  // Relations
  User                   User                  @relation(fields: [user_id], references: [id])
  avatar                 Avatar                @relation(fields: [avatar_id], references: [id])
  conversation_history   ConversationHistory[]
  knowledge_base_updates KnowledgeBase[]
  sessions               Session[]             @relation("AIFriendToSession")

  @@unique([user_id, name])
}

model ConversationHistory {
  id              String   @id @default(uuid())
  user_id         String
  ai_friend_id    String
  message         String
  sender          String
  created_at      DateTime @default(now())
  conversation_id String
  updated_at      DateTime @updatedAt
  summary         String?
  AIFriend        AIFriend @relation(fields: [ai_friend_id], references: [id])
  User            User     @relation(fields: [user_id], references: [id])

  @@index([conversation_id])
}

model KnowledgeBase {
  id           String   @id @default(uuid())
  ai_friend_id String
  content      String
  source       String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  AIFriend     AIFriend @relation(fields: [ai_friend_id], references: [id])
}

model UserKnowledgeBase {
  id         String   @id @default(uuid())
  user_id    String
  content    String
  source     String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  User       User     @relation(fields: [user_id], references: [id])
}

model Session {
  id            String      @id @default(uuid())
  user_id       String
  ai_friend_ids String[]
  session_type  SessionType
  title         String?
  description   String?
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  User          User        @relation(fields: [user_id], references: [id])
  AIFriends     AIFriend[]  @relation("AIFriendToSession")
}

enum SessionType {
  General
  StoryMode
  ResearchCreateMode
}

model AccountSettings {
  id               String    @id @default(uuid())
  userId           String    @unique @map("user_id")
  subscriptionPlan String?   @default("FREE") @map("subscription_plan")
  bio              String?   @db.Text
  createdAt        DateTime? @default(now()) @map("created_at")
  updatedAt        DateTime? @default(now()) @map("updated_at")
  user             User      @relation(fields: [userId], references: [id])
}

model BetaFeatures {
  id          String    @id @default(uuid())
  featureName String    @map("feature_name")
  description String?   @db.Text
  status      String?   @default("active")
  releaseDate DateTime? @default(now()) @map("release_date")
  createdAt   DateTime? @default(now()) @map("created_at")
  imageUrl    String?   @map("image_url")
}

model UsageStatistics {
  id                 String    @id @default(uuid())
  userId             String    @unique @map("user_id")
  totalConversations Int?      @default(100) @map("total_conversations")
  totalAiFriends     Int?      @default(0) @map("total_ai_friends")
  avgSessionTime     Int?      @default(0) @map("avg_session_time")
  conversationsLeft  Int?      @default(100) @map("conversations_left")
  createdAt          DateTime? @default(now()) @map("created_at")
  updatedAt          DateTime? @default(now()) @map("updated_at")
  user               User      @relation(fields: [userId], references: [id])
}

model UserSettings {
  id                 String    @id @default(uuid())
  userId             String    @unique @map("user_id")
  emailNotifications Boolean?  @default(false) @map("email_notifications")
  pushNotifications  Boolean?  @default(false) @map("push_notifications")
  shareUsageData     Boolean?  @default(false) @map("share_usage_data")
  messageHistory     Boolean?  @default(false) @map("message_history")
  autoReply          Boolean?  @default(false) @map("auto_reply")
  createdAt          DateTime? @default(now()) @map("created_at")
  updatedAt          DateTime? @default(now()) @map("updated_at")
  user               User      @relation(fields: [userId], references: [id])
}
